<launch>
    <!--dol Params-->
    <arg name="dol_loop_rate_value" default="10"/>
    <arg name="dol_goal_dist_tolerance" default = "0.1 "/>  <!-- in meters -->
    <arg name="tracker_pose_topic" default="/move_base_simple/goal"/> 
    
    <!-- simulation params-->
    <!-- To control the rate at which the tracker node will publish its goals -->
    <arg name="loop_rate_value" default="10"/> 
    <!--The topic name at which the keyboard_telelop node publishes its tracker velocities -->
    <arg name="teleop_publish_topic" default="/tracker/cmd_vel"/>
    <!--The topic name at which the tracker_sim_node subscribes to the trakcer velocities published by the keyboard_teleop node -->   
    <arg name="teleop_sub_topic" default="/tracker/cmd_vel"/> 
    <!--The topic name at which the tracker_sim_node publishes its goals -->
    

    <arg name="world_name" default="mowito"/>
    <arg name="gui" default="true"/>
    
    <!-- mwpfl and cartographer params -->
    <arg name="map_path" default="$(find mw_mapping)/maps/mowito_map.yaml"/>
    <arg name="cartographer" default="false" />
    <arg name="carto_map" default="$(find mowito_rosbot)/samples/maps/carto_map.pbstream" />


    <!-- =============== SIMULATION =============== -->

    <!--Tracker sim-->
    <include file="$(find tracker_sim)/launch/tracker_sim_keyboard_teleop.launch">
      <arg name="loop_rate_value" value="$(arg loop_rate_value)"/>
      <arg name="teleop_publish_topic" value="$(arg teleop_publish_topic)"/>
      <arg name="teleop_sub_topic" value="$(arg teleop_sub_topic)"/>
      <arg name="tracker_pose_topic" value="$(arg tracker_pose_topic)"/>
      <!--To control the initial tracker position on the x axis-->
      <arg name="tracker_init_pose_x" value="0.0"/> 
      <arg name="tracker_init_pose_y" value="0.0"/>
    </include>

    <!-- mapping and localization -->
    <!-- MWPFL-->
    <group unless="$(arg cartographer)">
      <include file="$(find mowito_rosbot)/launch/secondary_launch/start_mwpfl.launch">
          <arg name="map_address" value="$(arg map_path)"/>
          <arg name="robot_init_x" value="0"/>
          <arg name="robot_init_y" value="0"/>
          <arg name="robot_init_phi" value="0"/>
          <arg name="sim" value="true"/>
      </include>
    </group>

    <!-- Cartographer-->
    <group if="$(arg cartographer)">
      <node name="cartographer_node" pkg="cartographer_ros"
        type="cartographer_node" args="
            -configuration_directory $(find mowito_rosbot)/config/carto_config
            -configuration_basename rosbot_localization.lua
      -load_state_filename $(arg carto_map)"
        output="screen">
      </node>  
      <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
        type="cartographer_occupancy_grid_node" args="-resolution 0.05" />
    </group>


    <!-- -for converting the odom msg to tf -->
    <node pkg="utils" type="msg_to_tf" name="msg_to_tf">
        <param name="odometry_topic" value="/odom"/>
    </node>
    <!-- simulating ROSBOT and the world -->
    <!-- rosbot and the rviz-->
    <include file="$(find rosbot_description)/launch/rosbot_rviz.launch">
        <arg name="rviz_file" value="rosbot.rviz"/>
    </include>

    <!-- the world -->
    <include file="$(find rosbot_gazebo)/launch/rosbot_world.launch">
        <arg name="world" value="$(find rosbot_gazebo)/worlds/$(arg world_name).world"/>
        <arg name="gui" value="$(arg gui)"/>
    </include>

    <!-- ====================================  -->

    <!--controller obstacle avoidance / dol-->
    <include file="$(find mowito_rosbot)/launch/secondary_launch/start_follow_me.launch">
        <arg name="tracker_pose_topic" value="$(arg tracker_pose_topic)"/>
        <arg name="dol_goal_dist_tolerance" value="$(arg dol_goal_dist_tolerance)"/> 
        <arg name="dol_loop_rate_value" value="$(arg dol_loop_rate_value)"/>
    </include>


</launch>